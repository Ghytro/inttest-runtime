stages:
  - test
  - lint
  - maintenance

variables:
  PYTHON: python3

.test:
  stage: test
  variables:
    GOFLAGS: -count=3
  script:
    - export TMP_DIR=$(mktemp -d $CI_BUILDS_DIR/tmp-XXXXXXXX)
    - export GOPATH=$TMP_DIR/go
    - export GOCACHE=$GOPATH/.cache
    - mkdir -p $GOPATH/src/gitlab.com/pygolo
    - ln -s $PWD $GOPATH/src/gitlab.com/pygolo/py
    - cd $GOPATH/src/gitlab.com/pygolo/py
    - export PYENV_ROOT=$TMP_DIR/pyenv
    - export PATH=$PYENV_ROOT/bin:$PYENV_ROOT/shims:$PATH
    - '[ -z "$PYENV_VER" ] || (curl https://pyenv.run | bash && pyenv install -g $PYENV_VER && pyenv local $PYENV_VER && pip install -r requirements.txt)'
    - command -v $PYTHON
    - command -v go
    - '[ -n "$PYENV_VER" ] || make test-matrix-check'
    - '(cd $HOME && make -C $GOPATH/src/gitlab.com/pygolo/py pygolo-diags PWD=$(pwd))'
    - make test-embed V=1
    - '[ "$SKIP_TEST_EXTEND" = yes ] || make test-extend V=1'
    - '$PYTHON -c "import sys; sys.exit(0 if sys.version_info < (3, 9) else 1)" || make benchmark-embed V=1'
    - '[ "$SKIP_TEST_EXTEND" = yes ] || make benchmark-extend V=1'
    - make examples RUN=1
    - '(cd $HOME && make -C $GOPATH/src/gitlab.com/pygolo/py pygolo-diags PWD=$(pwd))'
  after_script:
    - rm -rf $TMP_DIR

.apk:
  before_script:
    - apk add --update --no-cache build-base python3-dev go make pkgconfig git

.apt:
  variables:
    DEBIAN_FRONTEND: noninteractive
  before_script:
    - apt-get update
    - apt-get install -y python3-dev python3-pytest python3-pytest-benchmark python3-hypothesis golang make pkg-config git curl

.dnf:
  before_script:
    - dnf -y install python3-devel go make pkg-config git

.zypper:
  before_script:
    - zypper install -y python3-devel python3-pip go make pkg-config git awk tar gzip
    - $PYTHON -m pip install -r requirements.txt
    - '[ -z "$PYENV_VER" ] || zypper install -y patch zlib bzip2 xz-devel libopenssl-devel'

alpine:
  extends:
    - .apk
    - .test
  image: $ARCH/alpine:$VERSION
  parallel:
    matrix:
      - VERSION: "3.18"
        ARCH: amd64
      - VERSION: "3.17"
        ARCH: ppc64le
      - VERSION: "3.16"
        ARCH: arm64v8
      - VERSION: "3.15"
        ARCH: arm32v7
  variables:
    TEST_MATRIX_NAME: "Alpine $VERSION"
    # https://github.com/golang/go/issues/13492
    SKIP_TEST_EXTEND: "yes"

debian:
  extends:
    - .apt
    - .test
  image: debian:$VERSION
  parallel:
    matrix:
      - VERSION: 12
      - VERSION: 11
      - VERSION: 10
  variables:
    TEST_MATRIX_NAME: "Debian $VERSION"

fedora:
  extends:
    - .dnf
    - .test
  image: fedora:$VERSION
  parallel:
    matrix:
      - VERSION: 39
      - VERSION: 38
      - VERSION: 37
      - VERSION: 36
      - VERSION: 35
  variables:
    TEST_MATRIX_NAME: "Fedora $VERSION"
  before_script:
    - !reference [.dnf, before_script]
    - dnf -y install python3-pytest python3-pytest-benchmark python3-hypothesis

freebsd:
  extends: .test
  tags:
    - freebsd-$VERSION
    - pygolo
  parallel:
    matrix:
      - VERSION: 13
      - VERSION: 13
        PYENV_VER: 3
  variables:
    TEST_MATRIX_NAME: "FreeBSD $VERSION"

macos:
  extends: .test
  image: macos-$VERSION-xcode-$XCODE
  tags:
    - saas-macos-medium-m1
  parallel:
    matrix:
      - VERSION: 14
        XCODE: 15
      - VERSION: 13
        XCODE: 14
      - VERSION: 12
        XCODE: 14
      - VERSION: 12
        XCODE: 14
        GOARCH: amd64
        PYTHON: arch -x86_64 /usr/bin/python3
      - VERSION: 12
        XCODE: 14
        PYENV_VER: 3
        PYTHON: python3
  variables:
    TEST_MATRIX_NAME: "macOS $VERSION xc-$XCODE"
    PYTHON: /usr/bin/python3
  before_script:
    - brew install pkg-config
    - $PYTHON -m pip install -r requirements.txt

opensuse:
  extends:
    - .zypper
    - .test
  image: opensuse/leap:$VERSION
  parallel:
    matrix:
      - VERSION: 15
  variables:
    TEST_MATRIX_NAME: "openSUSE Leap $VERSION"

rhel:
  extends:
    - .dnf
    - .test
  image: redhat/$BASE_IMG$VERSION
  parallel:
    matrix:
      - BASE_IMG: ubi
        VERSION: 9
      - BASE_IMG: ubi
        VERSION: 8
  variables:
    TEST_MATRIX_NAME: "RHEL UBI $VERSION"
  before_script:
    - !reference [.dnf, before_script]
    - $PYTHON -m pip install -r requirements.txt

sle:
  extends:
    - .zypper
    - .test
  image: registry.suse.com/bci/$BASE_IMG:$VERSION
  parallel:
    matrix:
      - BASE_IMG: bci-base
        VERSION: "15.4"
      - BASE_IMG: bci-base
        VERSION: "15.4"
        PYENV_VER: "3.6"
  variables:
    TEST_MATRIX_NAME: "SLE BCI $VERSION"

ubuntu:
  extends:
    - .apt
    - .test
  image: ubuntu:$VERSION
  parallel:
    matrix:
      - VERSION: "22.04"
      - VERSION: "20.04"
      - VERSION: "18.04"
  variables:
    TEST_MATRIX_NAME: "Ubuntu $VERSION"

code-lint:
  stage: lint
  extends: .apk
  image: alpine:latest
  script:
    - make prereq
    - make lint

license-check:
  stage: lint
  script:
    - make license-check

spell-check:
  stage: lint
  image: alpine:latest
  script:
    - apk add --update --no-cache git hunspell make
    - wget -nv
        "https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.aff"
        "https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_GB.dic"
        "https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.aff"
        "https://cgit.freedesktop.org/libreoffice/dictionaries/plain/en/en_US.dic"
    - make spell-check CHECK_ONLY=1

delete-old-pipelines:
  stage: maintenance
  image: python:3
  rules:
    - if: $OLD_PIPELINE_WEEKS != null
      when: always
  script:
    - python3 -m pip install python-gitlab pyyaml
    - ./scripts/delete-old-pipelines.py $CI_PROJECT_ID --token=$OLD_PIPELINE_TOKEN --weeks=$OLD_PIPELINE_WEEKS
